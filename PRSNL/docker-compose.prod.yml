version: '3.8'

services:
  db:
    image: pgvector/pgvector:pg16
    container_name: prsnl_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: prsnl
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d prsnl"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prsnl_prod_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: prsnl_backend_prod
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/prsnl
      # Add other production environment variables here
    volumes:
      - media_data_prod:/app/media
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - prsnl_prod_network

  nginx:
    image: nginx:stable-alpine
    container_name: prsnl_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro # For SSL/TLS certificates
    depends_on:
      - backend
      - frontend # Assuming frontend will also be dockerized for prod
    networks:
      - prsnl_prod_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod # Assuming a production Dockerfile for frontend
    container_name: prsnl_frontend_prod
    restart: unless-stopped
    networks:
      - prsnl_prod_network

volumes:
  postgres_data_prod:
  media_data_prod:

  prometheus:
    image: prom/prometheus:latest
    container_name: prsnl_prometheus_prod
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - prsnl_prod_network

  grafana:
    image: grafana/grafana:latest
    container_name: prsnl_grafana_prod
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    networks:
      - prsnl_prod_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    container_name: prsnl_elasticsearch_prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - prsnl_prod_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.0
    container_name: prsnl_kibana_prod
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - prsnl_prod_network

volumes:
  postgres_data_prod:
  media_data_prod:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  prsnl_prod_network:
    driver: bridge
