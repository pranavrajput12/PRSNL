name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript
        config: |
          name: "Security Analysis"
          queries:
            - uses: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_prsnl
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd PRSNL/backend
        python -m pip install --upgrade pip
        echo "🐍 Python version: $(python --version)"
        echo "📦 Pip version: $(pip --version)"
        pip install -r requirements.txt
        echo "✅ Dependencies installed successfully"

    - name: Check import sorting with isort
      run: |
        cd PRSNL/backend
        pip install isort
        echo "🔍 Checking Python import order..."
        isort --check-only --diff app/
      continue-on-error: true

    - name: Lint with flake8
      run: |
        cd PRSNL/backend
        pip install flake8
        echo "🔍 Running flake8 linter..."
        flake8 app/ --config=.flake8 --output-file=flake8-report.txt || true
        cat flake8-report.txt
      continue-on-error: true

    - name: Format check with Black
      run: |
        cd PRSNL/backend
        pip install black
        echo "🔍 Checking Python formatting..."
        black --check app/
      continue-on-error: true

    - name: Run security scan with Bandit
      run: |
        cd PRSNL/backend
        pip install bandit[toml]
        bandit -r app/ -f json -o bandit-report.json || true
      continue-on-error: true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: PRSNL/backend/bandit-report.json

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: PRSNL/frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd PRSNL/frontend
        echo "🟢 Node.js version: $(node --version)"
        echo "📦 npm version: $(npm --version)"
        npm ci
        echo "✅ Frontend dependencies installed successfully"

    - name: Generate API client
      run: |
        cd PRSNL/frontend
        npm run generate-api
        echo "✅ API client generated successfully"

    - name: Check for API drift
      run: |
        cd PRSNL/frontend
        if git diff --exit-code src/lib/api/generated.ts src/lib/types/generated/; then
          echo "✅ API client is up to date"
        else
          echo "❌ API client has drift - please run 'npm run generate-api' locally"
          git diff src/lib/api/generated.ts src/lib/types/generated/
          exit 1
        fi

    - name: Check formatting with Prettier
      run: |
        cd PRSNL/frontend
        echo "🎨 Checking code formatting..."
        npm run format:check || echo "⚠️ Some files need formatting"
      continue-on-error: true

    - name: Run type checking
      run: |
        cd PRSNL/frontend
        npm run check

    - name: Run linting
      run: |
        cd PRSNL/frontend
        npm run lint || true
        echo "✅ ESLint check completed (warnings may exist)"
      continue-on-error: true

    - name: Build frontend
      run: |
        cd PRSNL/frontend
        npm run build

  extension-test:
    name: Extension Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install extension dependencies
      run: |
        cd PRSNL/extension
        if [ -f package.json ]; then
          npm ci
        fi

    - name: Validate extension manifest
      run: |
        cd PRSNL/extension
        if [ -f manifest.json ]; then
          python -m json.tool manifest.json > /dev/null
          echo "Extension manifest is valid"
        fi

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      run: |
        cd PRSNL
        docker-compose build --parallel

    - name: Run integration tests
      run: |
        cd PRSNL
        echo "Integration tests would run here"
        # Add actual integration test commands