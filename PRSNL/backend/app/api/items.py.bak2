from fastapi import APIRouter, HTTPException, status, Query
from typing import Optional, List
from datetime import datetime
from uuid import UUID

from app.core.exceptions import ItemNotFound, InternalServerError
from app.db.database import get_db_pool
from app.models.schemas import Item, ItemUpdate, ItemStatus
from app.services.cache import cache_service, CacheKeys
from app.config import settings
import json

router = APIRouter()

@router.get("/items/{item_id}", response_model=Item)
async def get_item_detail(item_id: UUID):
    """Retrieve details of a specific item by ID."""
    # Try cache first
    cache_key = cache_service.make_key(CacheKeys.ITEM, str(item_id))
    cached = await cache_service.get(cache_key)
    if cached:
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"Returning cached item for {item_id}")
        return cached
    
    try:
        pool = await get_db_pool()
        async with pool.acquire() as conn:
            # Get item with tags
            query = """
                SELECT 
                    i.id,
                    i.title,
                    i.url,
                    i.summary,
                    i.processed_content as content,
                    CASE 
                        WHEN i.url LIKE '%youtube.com%' OR i.url LIKE '%youtu.be%' THEN 'video'
                        WHEN i.url LIKE '%.pdf' THEN 'pdf'
                        WHEN i.item_metadata->>'type' IS NOT NULL THEN i.item_metadata->>'type'
                        ELSE 'article'
                    END as item_type,
                    i.created_at,
                    i.updated_at,
                    i.item_metadata->>'thumbnail_url' as thumbnail_url,
                    i.item_metadata->>'platform' as platform,
                    (i.item_metadata->>'duration')::int as duration,
                    i.item_metadata->>'file_path' as file_path,
                    i.item_metadata,
                    COALESCE(
                        ARRAY_AGG(t.name) FILTER (WHERE t.name IS NOT NULL),
                        ARRAY[]::TEXT[]
                    ) as tags
                FROM items i
                LEFT JOIN item_tags it ON i.id = it.item_id
                LEFT JOIN tags t ON it.tag_id = t.id
                WHERE i.id = $1
                GROUP BY i.id
            """
            
            row = await conn.fetchrow(query, item_id)
            
            if not row:
                raise ItemNotFound(item_id)
                
            # Debug log
            import logging
            logger = logging.getLogger(__name__)
            logger.info(f"Row data for {item_id}: item_type={row.get('item_type')}, platform={row.get('platform')}, metadata type={type(row.get('metadata'))}")
            
            # Transform thumbnail URL for container paths
            thumbnail_url = row.get("thumbnail_url")
            if thumbnail_url and thumbnail_url.startswith("/app/media/"):
                thumbnail_url = thumbnail_url.replace("/app/media/", "/media/")
            
            result = {
                "id": str(row["id"]),
                "title": row["title"],
                "url": row["url"],
                "content": row["content"],
                "summary": row["summary"],
                "item_type": row["item_type"],
                "created_at": row["created_at"].isoformat(),
                "updated_at": row["updated_at"].isoformat() if row["updated_at"] else None,
                "tags": row["tags"],
                "status": ItemStatus.COMPLETED,
                "access_count": 0,
                "accessed_at": row["created_at"].isoformat(),
                "thumbnail_url": thumbnail_url,
                "platform": row["platform"],
                "duration": row["duration"],
                "file_path": row["file_path"],
                "metadata": row["metadata"] if isinstance(row.get("metadata"), dict) else (json.loads(row["metadata"]) if row.get("metadata") else {})
            }
            
            # Cache the result
            await cache_service.set(cache_key, result, settings.CACHE_TTL_ITEM)
            
            return result
    except ItemNotFound:
        raise
    except Exception as e:
        raise InternalServerError(f"Failed to retrieve item {item_id}: {e}")

@router.patch("/items/{item_id}", response_model=Item)
async def update_item(item_id: UUID, item_update: ItemUpdate):
    """Update an existing item."""
    try:
        pool = await get_db_pool()
        async with pool.acquire() as conn:
            # Start transaction
            async with conn.transaction():
                # Check if item exists
                exists = await conn.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM items WHERE id = $1)",
                    UUID(item_id)
                )
                
                if not exists:
                    raise ItemNotFound(item_id)
                
                # Update item fields if provided
                update_fields = []
                params = [item_id]
                param_count = 2
                
                if item_update.title is not None:
                    update_fields.append(f"title = ${param_count}")
                    params.append(item_update.title)
                    param_count += 1
                
                if item_update.summary is not None:
                    update_fields.append(f"summary = ${param_count}")
                    params.append(item_update.summary)
                    param_count += 1
                
                if update_fields:
                    update_fields.append("updated_at = NOW()")
                    update_query = f"""
                        UPDATE items 
                        SET {', '.join(update_fields)}
                        WHERE id = $1
                    """
                    await conn.execute(update_query, *params)
                
                # Handle tags update
                if item_update.tags is not None:
                    # Delete existing tags
                    await conn.execute(
                        "DELETE FROM item_tags WHERE item_id = $1",
                        UUID(item_id)
                    )
                    
                    # Insert new tags
                    for tag_name in item_update.tags:
                        # Get or create tag
                        tag_id = await conn.fetchval(
                            """
                            INSERT INTO tags (name) VALUES ($1)
                            ON CONFLICT (name) DO UPDATE SET name = EXCLUDED.name
                            RETURNING id
                            """,
                            tag_name.lower()
                        )
                        
                        # Link tag to item
                        await conn.execute(
                            "INSERT INTO item_tags (item_id, tag_id) VALUES ($1, $2)",
                            item_id, tag_id
                        )
                
                # Invalidate cache for this item
                cache_key = cache_service.make_key(CacheKeys.ITEM, str(item_id))
                await cache_service.delete(cache_key)
                
                # Also invalidate search and timeline caches
                await cache_service.clear_pattern(f"{CacheKeys.SEARCH}:*")
                await cache_service.clear_pattern(f"{CacheKeys.TIMELINE}:*")
                
                # Return the updated item
                return await get_item_detail(item_id)
                
    except ItemNotFound:
        raise
    except Exception as e:
        raise InternalServerError(f"Failed to update item {item_id}: {e}")

@router.delete("/items/{item_id}")
async def delete_item(item_id: str):
    """Delete an item."""
    try:
        pool = await get_db_pool()
        async with pool.acquire() as conn:
            # Start transaction
            async with conn.transaction():
                # Check if item exists
                exists = await conn.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM items WHERE id = $1)",
                    UUID(item_id)
                )
                
                if not exists:
                    raise ItemNotFound(item_id)
                
                # Delete item tags first (due to foreign key)
                await conn.execute(
                    "DELETE FROM item_tags WHERE item_id = $1",
                    UUID(item_id)
                )
                
                # Delete the item
                await conn.execute(
                    "DELETE FROM items WHERE id = $1",
                    UUID(item_id)
                )
                
                return {"message": "Item deleted successfully", "id": item_id}
                
    except ItemNotFound:
        raise
    except Exception as e:
        raise InternalServerError(f"Failed to delete item {item_id}: {e}")
