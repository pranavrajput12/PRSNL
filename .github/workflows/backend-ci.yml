name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'PRSNL/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'PRSNL/backend/**'

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('PRSNL/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd PRSNL/backend
        pip install --upgrade pip
        pip install black isort bandit flake8
        pip install -r requirements.txt
        
    - name: Format check with Black (informational)
      run: |
        cd PRSNL/backend
        black --check --diff . || echo "⚠️ Code formatting issues found - will be addressed in future iterations"
        
    - name: Import sorting check with isort (informational)
      run: |
        cd PRSNL/backend
        isort --check-only --diff . || echo "⚠️ Import sorting issues found - will be addressed in future iterations"
        
    - name: Lint with flake8 (informational)
      run: |
        cd PRSNL/backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Critical lint issues found"
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Security check with Bandit
      run: |
        cd PRSNL/backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
  
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prsnl_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('PRSNL/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd PRSNL/backend
        pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        pip install -r requirements.txt
        
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prsnl_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
      run: |
        cd PRSNL/backend
        # Create test database schema
        python -c "
        import asyncio
        import asyncpg
        async def create_schema():
            conn = await asyncpg.connect('postgresql://postgres:postgres@localhost:5432/prsnl_test')
            with open('PRSNL/backend/app/db/schema_unified.sql', 'r') as f:
                schema = f.read()
            await conn.execute('CREATE EXTENSION IF NOT EXISTS vector;')
            await conn.execute('CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";')
            # Execute schema in parts to handle dependencies
            statements = [s.strip() for s in schema.split(';') if s.strip()]
            for stmt in statements:
                if stmt:
                    try:
                        await conn.execute(stmt)
                    except Exception as e:
                        print(f'Skipping statement (likely already exists): {e}')
            await conn.close()
        asyncio.run(create_schema())
        "
        
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prsnl_test
        REDIS_URL: redis://localhost:6379
        TESTING: true
        # Mock API keys for testing
        AZURE_OPENAI_API_KEY: test_key_for_ci
        AZURE_OPENAI_ENDPOINT: https://test.openai.azure.com/
      run: |
        cd PRSNL/backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: PRSNL/backend/coverage.xml
        flags: backend
        name: backend-coverage
        
  ai-integration-test:
    name: AI Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd PRSNL/backend
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test AI integrations (mock)
      env:
        TESTING: true
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY || 'mock_key' }}
      run: |
        cd PRSNL/backend
        # Run AI integration tests with mocking for CI
        python scripts/test_ai_integrations.py --mock-mode
        
    - name: Test Whisper.cpp integration
      run: |
        cd PRSNL/backend
        # Test whisper.cpp integration with mock audio
        python scripts/test_whisper_cpp_integration.py --mock-mode
        
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./PRSNL/backend
        push: false
        tags: prsnl-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm prsnl-backend:${{ github.sha }} python -c "import app.main; print('Backend imports successfully')"
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Would deploy to staging environment"
        echo "This step would typically deploy to Railway staging environment"
        
  deploy-production:
    name: Deploy to Production  
    runs-on: ubuntu-latest
    needs: [build, ai-integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "🚀 Would deploy to production environment"
        echo "This step would typically deploy to Railway production environment"
        echo "Deployment can be configured with Railway CLI or API"