name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python (Backend)
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js (Frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: PRSNL/frontend/package-lock.json
        
    - name: Install dependencies (Backend)
      if: matrix.component == 'backend'
      run: |
        cd PRSNL/backend
        pip install --upgrade pip
        pip install safety bandit semgrep
        pip install -r requirements.txt
        
    - name: Install dependencies (Frontend)
      if: matrix.component == 'frontend'
      run: |
        cd PRSNL/frontend
        npm ci
        
    - name: Run Safety check (Backend)
      if: matrix.component == 'backend'
      run: |
        cd PRSNL/backend
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Run Bandit security scan (Backend)
      if: matrix.component == 'backend'
      run: |
        cd PRSNL/backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
        
    - name: Run Semgrep scan (Backend)
      if: matrix.component == 'backend'
      run: |
        cd PRSNL/backend
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
        
    - name: Run npm audit (Frontend)
      if: matrix.component == 'frontend'
      run: |
        cd PRSNL/frontend
        npm audit --audit-level=moderate
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.component }}
        path: |
          PRSNL/${{ matrix.component }}/*-report.json
        retention-days: 30
        
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      matrix:
        language: [python, javascript]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml
        
    - name: Setup Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        
    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        cd PRSNL/backend
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        cd PRSNL/frontend
        npm ci
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"
        
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        cd PRSNL/backend
        docker build -t prsnl-backend:scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'prsnl-backend:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: "prsnl-backend:scan"
        severity-cutoff: medium
        fail-build: false
        
  infrastructure-scan:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: github_actions,dockerfile,secrets
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov-results.sarif
        
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, secret-scan, container-scan, infrastructure-scan]
    if: always()
    
    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v3
      with:
        path: security-reports/
        
    - name: Generate security summary
      run: |
        echo "# ðŸ”’ Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> security-summary.md
        echo "- **CodeQL Analysis**: ${{ needs.codeql-analysis.result }}" >> security-summary.md
        echo "- **Secret Scanning**: ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "- **Container Scan**: ${{ needs.container-scan.result }}" >> security-summary.md
        echo "- **Infrastructure Scan**: ${{ needs.infrastructure-scan.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "## ðŸ“Š Reports Available" >> security-summary.md
        echo "" >> security-summary.md
        echo "Security reports are available as build artifacts." >> security-summary.md
        cat security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md